-- Lead Hub

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local lp = Players.LocalPlayer

-- Rayfield
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
    Name = "Lead Hub",
    LoadingTitle = "Lead Hub",
    LoadingSubtitle = "by Triplex",
    ConfigurationSaving = {Enabled = true, FolderName = "LeadHub", FileName = "Settings"},
    Discord = {Enabled = false},
    KeySystem = false
})

-- Tabs
local CombatTab = Window:CreateTab("Combat", 4483362458)
local MiscTab = Window:CreateTab("Misc", 4483362458)

-- Audio Block IDs
local autoBlockTriggerSounds = {
    ["102228729296384"] = true, ["140242176732868"] = true, ["112809109188560"] = true,
    ["136323728355613"] = true, ["115026634746636"] = true, ["84116622032112"] = true,
    ["108907358619313"] = true, ["127793641088496"] = true, ["86174610237192"] = true,
    ["95079963655241"] = true, ["101199185291628"] = true, ["119942598489800"] = true,
    ["84307400688050"] = true
}

-- State
local autoBlockOn = true
local autoPunchOn = true
local infiniteStamina = true
local detectionRange = 10 -- 10 studs default
local punchHealthThreshold = 400
local punchCooldown = false

-- Infinite Stamina
local function enableInfiniteStamina()
    local success, StaminaModule = pcall(function()
        return require(ReplicatedStorage.Systems.Character.Game.Sprinting)
    end)
    if not success or not StaminaModule then return end
    StaminaModule.StaminaLossDisabled = true
    task.spawn(function()
        while infiniteStamina do
            task.wait(0.1)
            StaminaModule.Stamina = StaminaModule.MaxStamina
            if StaminaModule.StaminaChanged then
                pcall(function() StaminaModule.StaminaChanged:Fire() end)
            end
        end
    end)
end
enableInfiniteStamina()

-- UI Toggles
CombatTab:CreateToggle({Name="Auto Block", CurrentValue=true, Callback=function(val) autoBlockOn = val end})
CombatTab:CreateToggle({Name="Auto Punch", CurrentValue=true, Callback=function(val) autoPunchOn = val end})
CombatTab:CreateToggle({Name="Infinite Stamina", CurrentValue=true, Callback=function(val) infiniteStamina = val enableInfiniteStamina() end})
CombatTab:CreateInput({Name="Detection Range", PlaceholderText="10", RemoveTextAfterFocusLost=false, Callback=function(txt) detectionRange = tonumber(txt) or detectionRange end})

-- Misc: Copy Discord Invite
MiscTab:CreateButton({Name="Copy Discord Invite", Callback=function()
    pcall(function() setclipboard("https://discord.gg/baXMxMz5JZ") end)
end})

-- Audio Block
local soundHooks = {}

local function getSoundPosition(sound)
    if not sound then return nil end
    if sound.Parent and sound.Parent:IsA("BasePart") then
        return sound.Parent.Position
    end
    if sound.Parent and sound.Parent:IsA("Attachment") and sound.Parent.Parent and sound.Parent.Parent:IsA("BasePart") then
        return sound.Parent.Parent.Position
    end
    return nil
end

local function fireBlock()
    ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer("UseActorAbility","Block")
end

local function attemptBlock(sound)
    if not autoBlockOn then return end
    if not sound or not sound:IsA("Sound") or not sound.IsPlaying then return end
    local id = tostring(sound.SoundId):match("%d+")
    if not id or not autoBlockTriggerSounds[id] then return end
    local myRoot = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if not myRoot then return end
    local pos = getSoundPosition(sound)
    if pos and (myRoot.Position - pos).Magnitude <= detectionRange then
        fireBlock()
    end
end

local function hookSound(sound)
    if not sound or soundHooks[sound] then return end
    local conn1 = sound.Played:Connect(function() pcall(attemptBlock, sound) end)
    local conn2 = sound:GetPropertyChangedSignal("IsPlaying"):Connect(function()
        if sound.IsPlaying then pcall(attemptBlock, sound) end
    end)
    local conn3
    conn3 = sound.Destroying:Connect(function()
        if conn1 then conn1:Disconnect() end
        if conn2 then conn2:Disconnect() end
        if conn3 then conn3:Disconnect() end
        soundHooks[sound] = nil
    end)
    soundHooks[sound] = {conn1, conn2, conn3}
    if sound.IsPlaying then pcall(attemptBlock, sound) end
end

-- Hook all existing sounds
for _, desc in ipairs(game:GetDescendants()) do
    if desc:IsA("Sound") then
        pcall(hookSound, desc)
    end
end

-- Hook future sounds
game.DescendantAdded:Connect(function(desc)
    if desc:IsA("Sound") then
        pcall(hookSound, desc)
    end
end)

-- Punch
local function safeActivateButton(button)
    if button and button:IsA("ImageButton") and button.Visible then
        pcall(function() button:Activate() end)
        if type(getconnections) == "function" then
            for _, conn in ipairs(getconnections(button.MouseButton1Click)) do
                pcall(function() conn:Fire() end)
            end
        end
    end
end

local function clickPunchButton(target)
    if punchCooldown or not autoPunchOn then return end
    local gui = lp:FindFirstChild("PlayerGui")
    if not gui then return end
    local mainUI = gui:FindFirstChild("MainUI")
    local container = mainUI and mainUI:FindFirstChild("AbilityContainer")
    local punchButton = container and container:FindFirstChild("Punch")
    if punchButton and punchButton:IsA("ImageButton") and punchButton.Visible then
        local myChar = lp.Character
        local myRoot = myChar and myChar:FindFirstChild("HumanoidRootPart")
        local targetRoot = target and target:FindFirstChild("HumanoidRootPart")
        if myRoot and targetRoot then
            myRoot.CFrame = CFrame.new(myRoot.Position, targetRoot.Position)
        end
        safeActivateButton(punchButton)
        punchCooldown = true
        task.delay(3, function()
            punchCooldown = false
        end)
    end
end

-- Auto Punch Loop
RunService.RenderStepped:Connect(function()
    if not autoPunchOn then return end
    local myChar = lp.Character
    local myRoot = myChar and myChar:FindFirstChild("HumanoidRootPart")
    if not myRoot then return end

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= lp and plr.Character then
            local hum = plr.Character:FindFirstChildOfClass("Humanoid")
            local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
            if hum and hrp and hum.Health >= punchHealthThreshold then
                local dist = (hrp.Position - myRoot.Position).Magnitude
                if dist <= detectionRange then
                    clickPunchButton(plr.Character)
                end
            end
        end
    end
end)
